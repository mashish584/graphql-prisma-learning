type Query {
  me: User!
  post(id: ID!): Post!
  posts(query: String): [Post!]!
  myPosts: [Post!]!
  users(query: String): [User!]!
  comments(query: String): [Comment!]!
}

type Mutation {
  createUser(data: CreateUserInput): AuthPayload!
  loginUser(data: AuthInput): AuthPayload!
  updateUser(data: UpdateUserInput): User!
  deleteUser: User!
  createPost(data: PostInput): Post!
  updatePost(id: ID!, data: UpdatePostInput): Post!
  deletePost(id: ID!): Post!
  createComment(data: CommentInput): Comment!
  updateComment(id: ID!, data: UpdateCommentInput): Comment!
  deleteComment(id: ID!): Comment!
}

type AuthPayload {
  user: User!
  token: String!
}

input AuthInput {
  email: String!
  password: String!
}

type Subscription {
  count: Int!
  comment(id: ID!): CommentSubscriptionBody!
  post(id: ID!): PostSubscriptionBody!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
}

input PostInput {
  title: String!
  body: String!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input CommentInput {
  text: String!
  post: ID!
}

input UpdateCommentInput {
  text: String
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}
type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionBody {
  mutation: MutationType!
  node: Post
}

type CommentSubscriptionBody {
  mutation: MutationType!
  node: Comment
}
