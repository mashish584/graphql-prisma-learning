type Query {
	me: User!
	post: Post!
	posts(query: String): [Post!]!
	users(query: String): [User!]!
	comments(query: String): [Comment!]!
}

type Mutation {
	createUser(data: CreateUserInput): User!
	updateUser(id: ID!, data: UpdateUserInput): User!
	deleteUser(id: ID!): User!
	createPost(data: PostInput): Post!
	updatePost(id: ID!, data: UpdatePostInput): Post!
	deletePost(id: ID!): Post!
	createComment(data: CommentInput): Comment!
	updateComment(id: ID!, data: UpdateCommentInput): Comment!
	deleteComment(id: ID!): Comment!
}

type Subscription {
	count: Int!
	comment(id: ID!): CommentSubscriptionBody!
	post: PostSubscriptionBody!
}

input CreateUserInput {
	name: String!
	email: String!
}

input UpdateUserInput {
	name: String
	email: String
}

input PostInput {
	title: String!
	body: String!
	author: ID!
}

input UpdatePostInput {
	title: String
	body: String
	published: Boolean
}

input CommentInput {
	text: String!
	author: ID!
	post: ID!
}

input UpdateCommentInput {
	text: String
}

type User {
	id: ID!
	name: String!
	email: String!
	posts: [Post!]!
	comments: [Comment!]!
}

type Post {
	id: ID!
	title: String!
	body: String!
	published: Boolean!
	author: User!
	comments: [Comment!]!
}
type Comment {
	id: ID!
	text: String!
	author: User!
	post: Post!
}

enum MutationType {
	CREATED
	UPDATED
	DELETED
}

type PostSubscriptionBody {
	mutation: MutationType!
	data: Post!
}

type CommentSubscriptionBody {
	mutation: MutationType!
	data: Comment!
}
